{"version":3,"sources":["components/FeedbackOptions/feedbackOptions.module.css","components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["module","exports","Section","title","children","Statistics","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","FeedbackOptions","clickHandler","className","styles","button","type","name","onClick","Notification","message","App","state","e","key","target","setState","prev","Object","values","reduce","acc","item","Math","round","isFeedBack","Boolean","this","Component","ReactDOM","render","document","getElementById"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,OAAS,kC,8GCiBZC,EAfC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,iCACE,4BAAKD,GACJC,ICgCQC,EApCI,SAAC,GAMb,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,gCAEA,OACE,oCACE,oCACQ,8BAAOJ,IAEf,uCACW,8BAAOC,IAElB,mCACO,8BAAOC,IAEd,qCACS,8BAAOC,MAEhB,iDACqB,8BAAOC,IAAP,Q,gBCWZC,EAhCS,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACzB,OACE,oCACE,4BACEC,UAAWC,IAAOC,OAClBC,KAAK,SACLC,KAAK,OACLC,QAASN,GAJX,QAOA,4BACEC,UAAWC,IAAOC,OAClBC,KAAK,SACLC,KAAK,UACLC,QAASN,GAJX,WAOA,4BACEC,UAAWC,IAAOC,OAClBC,KAAK,SACLC,KAAK,MACLC,QAASN,GAJX,SCNSO,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,oCACE,4BAAKA,KCgDIC,E,4MA/CbC,MAAQ,CACNhB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPI,aAAe,SAAAW,GACb,IAAIC,EAAMD,EAAEE,OAAOR,KACnB,EAAKS,UAAS,SAAAC,GAAI,sBAAQH,EAAMG,EAAKH,GAAO,O,EAG9Cf,mBAAqB,kBACnBmB,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,I,EAM9DtB,gCAAkC,kBAChCuB,KAAKC,MAAO,EAAKZ,MAAMhB,KAAO,EAAKG,qBAAwB,M,uDAK3D,IAAM0B,EAAaC,QAAQC,KAAK5B,sBAChC,OACE,oCACE,kBAAC,EAAD,CAASN,MAAM,yBACb,kBAAC,EAAD,CAAiBS,aAAcyB,KAAKzB,gBAEtC,kBAAC,EAAD,CAAST,MAAOgC,EAAa,YAAc,IACxCA,GACC,kBAAC,EAAD,iBACME,KAAKf,MADX,CAEEb,mBAAoB4B,KAAK5B,mBACzBC,gCACE2B,KAAK3B,oCAITyB,GAAc,kBAAC,EAAD,CAAcf,QAAQ,4B,GAzC9BkB,aCFlBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.9a8d17d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"feedbackOptions_button__OGhHf\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  // children: PropTypes.element.isRequired, \r\n\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  countTotalFeedback,\r\n  countPositiveFeedbackPercentage,\r\n}) => {\r\n  return (\r\n    <>\r\n      <p>\r\n        Good: <span>{good}</span>\r\n      </p>\r\n      <p>\r\n        Neutral: <span>{neutral}</span>\r\n      </p>\r\n      <p>\r\n        Bad: <span>{bad}</span>\r\n      </p>\r\n      <p>\r\n        Total: <span>{countTotalFeedback()}</span>\r\n      </p>\r\n      <p>\r\n        Positive feedback: <span>{countPositiveFeedbackPercentage()}%</span>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  countTotalFeedback: PropTypes.func.isRequired,\r\n  countPositiveFeedbackPercentage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './feedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ clickHandler }) => {\r\n  return (\r\n    <>\r\n      <button\r\n        className={styles.button}\r\n        type=\"button\"\r\n        name=\"good\"\r\n        onClick={clickHandler}>\r\n        Good\r\n      </button>\r\n      <button\r\n        className={styles.button}\r\n        type=\"button\"\r\n        name=\"neutral\"\r\n        onClick={clickHandler}>\r\n        Neutral\r\n      </button>\r\n      <button\r\n        className={styles.button}\r\n        type=\"button\"\r\n        name=\"bad\"\r\n        onClick={clickHandler}>\r\n        Bad\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  clickHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return (\r\n    <>\r\n      <h3>{message}</h3>\r\n    </>\r\n  );\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\nimport Section from './Section/Section';\r\nimport Statistics from './Statistics/Statistics';\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\nimport Notification from './Notification/Notification';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  clickHandler = e => {\r\n    let key = e.target.name;\r\n    this.setState(prev => ({ [key]: prev[key] + 1 }));\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    Object.values(this.state).reduce((acc, item) => acc + item, 0);\r\n\r\n  // countTotalFeedback() {\r\n  //   const sum = Object.values( this.state).reduce((acc, item) => acc + item, 0);\r\n  //   return sum;\r\n  // };\r\n  countPositiveFeedbackPercentage = () =>\r\n    Math.round((this.state.good / this.countTotalFeedback()) * 100);\r\n\r\n  render() {\r\n    // const x = this.countPositiveFeedbackPercentage();\r\n    // console.log(typeof x);\r\n    const isFeedBack = Boolean(this.countTotalFeedback());\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions clickHandler={this.clickHandler} />\r\n        </Section>\r\n        <Section title={isFeedBack ? 'Statistic' : ''}>\r\n          {isFeedBack && (\r\n            <Statistics\r\n              {...this.state}\r\n              countTotalFeedback={this.countTotalFeedback}\r\n              countPositiveFeedbackPercentage={\r\n                this.countPositiveFeedbackPercentage\r\n              }\r\n            />\r\n          )}\r\n          {!isFeedBack && <Notification message=\"No feedback given\" />}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root'),\n);\n \n// Для deploy:\n// https://create-react-app.dev/docs/deployment/\n\n\n// ReactDOM.render(\n//   <Profile\n//     name={user.name}\n//     tag={user.tag}\n//     location={user.location}\n//     avatar={user.avatar}\n//     stats={user.stats}\n//   />,\n//   document.getElementById('root'),\n// );\n\n\n// .prettierrc {\n//   \"printWidth\": 80,\n//   \"tabWidth\": 2,\n//   \"useTabs\": false,\n//   \"semi\": true,\n//   \"singleQuote\": true,\n//   \"trailingComma\": \"all\",\n//   \"bracketSpacing\": true,\n//   \"jsxBracketSameLine\": false,\n//   \"arrowParens\": \"avoid\",\n//   \"proseWrap\": \"always\"\n// }\n//  .lintstagedrc {\n//   \"src/**/*.{json,css,scss,md}\": [\"prettier --write\", \"git add\"],\n//   \"src/**/*.{js,jsx,ts,tsx}\": [\"prettier --write\", \"eslint --fix\", \"git add\"]\n// }\n// video по Linter\n// http://fecore.net.ua/books/rq7s2k-react/lesson-03/\n// https://app.schoology.com/page/2179321672\n// https://www.youtube.com/watch?v=j25TVuFQntA&feature=youtu.be\n"],"sourceRoot":""}